{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\src\\\\Components\\\\StockWatch\\\\index.js\";\nimport React, { useRef } from 'react';\nimport Title from '../TitleComponent/index.js';\nimport Chart from 'chart.js'; // import useScript from './useScript';\n\nfunction StockWatch(props) {\n  console.log(props);\n\n  var _useScript = useScript('./chartjs-chart-financial.js./chartjs-chart-financial.js'),\n      _useScript2 = _slicedToArray(_useScript, 2),\n      loaded = _useScript2[0],\n      error = _useScript2[1]; // Hook\n\n\n  var cachedScripts = [];\n\n  function useScript(src) {\n    // Keeping track of script loaded and error state\n    var _useState = useState({\n      loaded: false,\n      error: false\n    }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n    useEffect(function () {\n      // If cachedScripts array already includes src that means another instance ...\n      // ... of this hook already loaded this script, so no need to load again.\n      if (cachedScripts.includes(src)) {\n        setState({\n          loaded: true,\n          error: false\n        });\n      } else {\n        cachedScripts.push(src); // Create script\n\n        var script = document.createElement('script');\n        script.src = src;\n        script.async = true; // Script event listener callbacks for load and error\n\n        var onScriptLoad = function onScriptLoad() {\n          setState({\n            loaded: true,\n            error: false\n          });\n        };\n\n        var onScriptError = function onScriptError() {\n          // Remove from cachedScripts we can try loading again\n          var index = cachedScripts.indexOf(src);\n          if (index >= 0) cachedScripts.splice(index, 1);\n          script.remove();\n          setState({\n            loaded: true,\n            error: true\n          });\n        };\n\n        script.addEventListener('load', onScriptLoad);\n        script.addEventListener('error', onScriptError); // Add script to document body\n\n        document.body.appendChild(script); // Remove event listeners on cleanup\n\n        return function () {\n          script.removeEventListener('load', onScriptLoad);\n          script.removeEventListener('error', onScriptError);\n        };\n      }\n    }, [src] // Only re-run effect if script src changes\n    );\n    return [state.loaded, state.error];\n  } // var barCount = 60;\n  // var initialDateStr = '01 Apr 2017 00:00 Z';\n  // var ctx = document.getElementById('chart').getContext('2d');\n  // ctx.canvas.width = 240;\n  // ctx.canvas.height = 240;\n  // var myStockChart = new Chart(ctx, {\n  // \ttype: 'candlestick',\n  // \tdata: {\n  // \t\tdatasets: [{\n  // \t\t\tlabel: 'CHRT - Chart.js Corporation',\n  // \t\t\tdata: getRandomData(initialDateStr, barCount)\n  // \t\t}]\n  // \t},\n  // \toptions: {\n  // \t\tscales: {\n  // \t\t\tx: {\n  // \t\t\t\tafterBuildTicks: function(scale) {\n  // \t\t\t\t\tconst majorUnit = scale._majorUnit;\n  // \t\t\t\t\tconst ticks = scale.ticks;\n  // \t\t\t\t\tconst firstTick = ticks[0];\n  // \t\t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n  // \t\t\t\t\tval = luxon.DateTime.fromMillis(ticks[0].value);\n  // \t\t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n  // \t\t\t\t\t\tfirstTick.major = true;\n  // \t\t\t\t\t} else {\n  // \t\t\t\t\t\tfirstTick.major = false;\n  // \t\t\t\t\t}\n  // \t\t\t\t\tlastMajor = val.get(majorUnit);\n  // \t\t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n  // \t\t\t\t\t\ttick = ticks[i];\n  // \t\t\t\t\t\tval = luxon.DateTime.fromMillis(tick.value);\n  // \t\t\t\t\t\tcurrMajor = val.get(majorUnit);\n  // \t\t\t\t\t\ttick.major = currMajor !== lastMajor;\n  // \t\t\t\t\t\tlastMajor = currMajor;\n  // \t\t\t\t\t}\n  // \t\t\t\t\treturn ticks;\n  // \t\t\t\t}\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // });\n  // function randomBar(date, lastClose) {\n  // \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n  // \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n  // \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n  // \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n  // \treturn {\n  // \t\tt: date.valueOf(),\n  // \t\to: open,\n  // \t\th: high,\n  // \t\tl: low,\n  // \t\tc: close\n  // \t};\n  // }\n  // var update = function() {\n  // \tvar dataset = chart.config.data.datasets[0];\n  // \t// candlestick vs ohlc\n  // \tvar type = document.getElementById('type').value;\n  // \tdataset.type = type;\n  // \t// linear vs log\n  // \tvar scaleType = document.getElementById('scale-type').value;\n  // \tchart.config.options.scales.y.type = scaleType;\n  // \t// color\n  // \tvar colorScheme = document.getElementById('color-scheme').value;\n  // \tif (colorScheme === 'neon') {\n  // \t\tdataset.color = {\n  // \t\t\tup: '#01ff01',\n  // \t\t\tdown: '#fe0000',\n  // \t\t\tunchanged: '#999',\n  // \t\t};\n  // \t} else {\n  // \t\tdelete dataset.color;\n  // \t}\n  // \t// border\n  // \tvar border = document.getElementById('border').value;\n  // \tvar defaultOpts = Chart.defaults.elements[type];\n  // \tif (border === 'true') {\n  // \t\tdataset.borderColor = defaultOpts.borderColor;\n  // \t} else {\n  // \t\tdataset.borderColor = {\n  // \t\t\tup: defaultOpts.color.up,\n  // \t\t\tdown: defaultOpts.color.down,\n  // \t\t\tunchanged: defaultOpts.color.up\n  // \t\t};\n  // \t}\n  // \tchart.update();\n  // };\n  //   update();\n  //   document.getElementById('randomizeData').addEventListener('click', function() {\n  //     chart.data.datasets.forEach(function(dataset) {\n  //       dataset.data = getRandomData(initialDateStr, barCount);\n  //     });\n  //     update();\n  //   })\n  // const theme = useTheme();\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 2\n    }\n  }, \"Stocks to watch:\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 2\n    }\n  }));\n}\n\n;\nexport default StockWatch;","map":{"version":3,"sources":["C:/Users/jordo/Google Drive/GitHub/Project-3/StocksN/client/src/Components/StockWatch/index.js"],"names":["React","useRef","Title","Chart","StockWatch","props","console","log","useScript","loaded","error","cachedScripts","src","useState","state","setState","useEffect","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport Title from '../TitleComponent/index.js';\nimport Chart from 'chart.js';\n// import useScript from './useScript';\n\nfunction StockWatch(props){\n\nconsole.log(props)\n\nconst [loaded, error] = useScript(\n    './chartjs-chart-financial.js./chartjs-chart-financial.js'\n  );\n\n  \n\n  \n  \n  // Hook\n  let cachedScripts = [];\n  function useScript(src) {\n\t// Keeping track of script loaded and error state\n\tconst [state, setState] = useState({\n\t  loaded: false,\n\t  error: false\n\t});\n  \n\tuseEffect(\n\t  () => {\n\t\t// If cachedScripts array already includes src that means another instance ...\n\t\t// ... of this hook already loaded this script, so no need to load again.\n\t\tif (cachedScripts.includes(src)) {\n\t\t  setState({\n\t\t\tloaded: true,\n\t\t\terror: false\n\t\t  });\n\t\t} else {\n\t\t  cachedScripts.push(src);\n  \n\t\t  // Create script\n\t\t  let script = document.createElement('script');\n\t\t  script.src = src;\n\t\t  script.async = true;\n  \n\t\t  // Script event listener callbacks for load and error\n\t\t  const onScriptLoad = () => {\n\t\t\tsetState({\n\t\t\t  loaded: true,\n\t\t\t  error: false\n\t\t\t});\n\t\t  };\n  \n\t\t  const onScriptError = () => {\n\t\t\t// Remove from cachedScripts we can try loading again\n\t\t\tconst index = cachedScripts.indexOf(src);\n\t\t\tif (index >= 0) cachedScripts.splice(index, 1);\n\t\t\tscript.remove();\n  \n\t\t\tsetState({\n\t\t\t  loaded: true,\n\t\t\t  error: true\n\t\t\t});\n\t\t  };\n  \n\t\t  script.addEventListener('load', onScriptLoad);\n\t\t  script.addEventListener('error', onScriptError);\n  \n\t\t  // Add script to document body\n\t\t  document.body.appendChild(script);\n  \n\t\t  // Remove event listeners on cleanup\n\t\t  return () => {\n\t\t\tscript.removeEventListener('load', onScriptLoad);\n\t\t\tscript.removeEventListener('error', onScriptError);\n\t\t  };\n\t\t}\n\t  },\n\t  [src] // Only re-run effect if script src changes\n\t);\n  \n\treturn [state.loaded, state.error];\n  }\n\n\n// var barCount = 60;\n// var initialDateStr = '01 Apr 2017 00:00 Z';\n\n// var ctx = document.getElementById('chart').getContext('2d');\n// ctx.canvas.width = 240;\n// ctx.canvas.height = 240;\n// var myStockChart = new Chart(ctx, {\n// \ttype: 'candlestick',\n// \tdata: {\n// \t\tdatasets: [{\n// \t\t\tlabel: 'CHRT - Chart.js Corporation',\n// \t\t\tdata: getRandomData(initialDateStr, barCount)\n// \t\t}]\n// \t},\n// \toptions: {\n// \t\tscales: {\n// \t\t\tx: {\n// \t\t\t\tafterBuildTicks: function(scale) {\n// \t\t\t\t\tconst majorUnit = scale._majorUnit;\n// \t\t\t\t\tconst ticks = scale.ticks;\n// \t\t\t\t\tconst firstTick = ticks[0];\n// \t\t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n\n// \t\t\t\t\tval = luxon.DateTime.fromMillis(ticks[0].value);\n// \t\t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n// \t\t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n// \t\t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n// \t\t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n// \t\t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n// \t\t\t\t\t\tfirstTick.major = true;\n// \t\t\t\t\t} else {\n// \t\t\t\t\t\tfirstTick.major = false;\n// \t\t\t\t\t}\n// \t\t\t\t\tlastMajor = val.get(majorUnit);\n\n// \t\t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n// \t\t\t\t\t\ttick = ticks[i];\n// \t\t\t\t\t\tval = luxon.DateTime.fromMillis(tick.value);\n// \t\t\t\t\t\tcurrMajor = val.get(majorUnit);\n// \t\t\t\t\t\ttick.major = currMajor !== lastMajor;\n// \t\t\t\t\t\tlastMajor = currMajor;\n// \t\t\t\t\t}\n// \t\t\t\t\treturn ticks;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t}\n// });\n\n// function randomBar(date, lastClose) {\n// \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n// \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n// \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n// \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n// \treturn {\n// \t\tt: date.valueOf(),\n// \t\to: open,\n// \t\th: high,\n// \t\tl: low,\n// \t\tc: close\n// \t};\n\n// }\n\n\n// var update = function() {\n// \tvar dataset = chart.config.data.datasets[0];\n\n// \t// candlestick vs ohlc\n// \tvar type = document.getElementById('type').value;\n// \tdataset.type = type;\n\n// \t// linear vs log\n// \tvar scaleType = document.getElementById('scale-type').value;\n// \tchart.config.options.scales.y.type = scaleType;\n\n// \t// color\n// \tvar colorScheme = document.getElementById('color-scheme').value;\n// \tif (colorScheme === 'neon') {\n// \t\tdataset.color = {\n// \t\t\tup: '#01ff01',\n// \t\t\tdown: '#fe0000',\n// \t\t\tunchanged: '#999',\n// \t\t};\n// \t} else {\n// \t\tdelete dataset.color;\n// \t}\n\n// \t// border\n// \tvar border = document.getElementById('border').value;\n// \tvar defaultOpts = Chart.defaults.elements[type];\n// \tif (border === 'true') {\n// \t\tdataset.borderColor = defaultOpts.borderColor;\n// \t} else {\n// \t\tdataset.borderColor = {\n// \t\t\tup: defaultOpts.color.up,\n// \t\t\tdown: defaultOpts.color.down,\n// \t\t\tunchanged: defaultOpts.color.up\n// \t\t};\n// \t}\n\n// \tchart.update();\n// };\n\n//   update();\n\n//   document.getElementById('randomizeData').addEventListener('click', function() {\n//     chart.data.datasets.forEach(function(dataset) {\n//       dataset.data = getRandomData(initialDateStr, barCount);\n//     });\n//     update();\n//   })\n\n  \n  \n\n\t// const theme = useTheme();\n\nreturn (\n\t<React.Fragment>\n\t<Title>Stocks to watch:</Title>\n\t<canvas id=\"chart\"></canvas>\n\t\n\t</React.Fragment>\n);\n\n};\n\nexport default StockWatch;"]},"metadata":{},"sourceType":"module"}