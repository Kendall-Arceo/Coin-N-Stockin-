{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\src\\\\Components\\\\StockWatch\\\\index.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Title from '../TitleComponent/index.js';\nimport CandleStick from '../CandleStick';\nimport useScript from './useScript';\nimport moment from 'moment';\n\nfunction StockWatch(props) {\n  console.log(props); // const [loaded, error] = useScript(\n  //     './Chart-chart-financial.js'\n  //   );\n  //   useEffect(() => {\n  // \tif (!loaded) return\n  // }, [loaded, error])\n  // [] = useState({\n  // })\n  // var dataDate = Chart.()\n  // const chartConfig = {\n  // \toptions: {\n  // \t\tchart: {\n  // \t\t\ttype: 'candlestick',\n  // \t\t\theight: 240\n  // \t\t  },\n  // \t\t  title: {\n  // \t\t\ttext: 'CandleStick Chart',\n  // \t\t\talign: 'left'\n  // \t\t  },\n  // \t\t  xaxis: {\n  // \t\t\ttype: 'datetime'\n  // \t\t  },\n  // \t\t  yaxis: {\n  // \t\t\ttooltip: {\n  // \t\t\t  enabled: true\n  // \t\t\t}\n  // \t\t  }\n  // \t},\n  // \tseries: [{\n  // \t\tdata: data.slice()\n  // \t}],\n  // type: 'candlestick',\n  // data: {\n  // \tdatasets: [{\n  // \t\tlabel: 'CHRT - Chart.js Corporation',\n  // \t\tdata: getData(initialDateStr, barCount)\n  // \t}]\n  // },\n  // options: {\n  // \tscales: {\n  // \t\tx: {\n  // \t\t\tafterBuildTicks: function(scale) {\n  // \t\t\t\tconst majorUnit = scale._majorUnit;\n  // \t\t\t\tconst ticks = scale.ticks;\n  // \t\t\t\tconst firstTick = ticks[0];\n  // \t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n  // \t\t\t\tval = moment(ticks[0].value);\n  // \t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n  // \t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n  // \t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n  // \t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n  // \t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n  // \t\t\t\t\tfirstTick.major = true;\n  // \t\t\t\t} else {\n  // \t\t\t\t\tfirstTick.major = false;\n  // \t\t\t\t}\n  // \t\t\t\tlastMajor = val.get(majorUnit);\n  // \t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n  // \t\t\t\t\ttick = ticks[i];\n  // \t\t\t\t\tval = moment(tick.value);\n  // \t\t\t\t\tcurrMajor = val.get(majorUnit);\n  // \t\t\t\t\ttick.major = currMajor !== lastMajor;\n  // \t\t\t\t\tlastMajor = currMajor;\n  // \t\t\t\t}\n  // \t\t\t\treturn ticks;\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // }\n  // }\n  // const chartContainer = useRef(null);\n  // const [chartInstance, setChartInstance] = useState(null)\n  // useEffect(() => {\n  // \tif (chartContainer && chartContainer.current) {\n  // \t  const newChartInstance = new Chart(chartContainer.current, chartConfig);\n  // \t  setChartInstance(newChartInstance);\n  // \t  Chart.render()\n  // \t}\n  //   }, [chartContainer]);\n  //   const updateDataset = (datasetIndex, newData) => {\n  // \tchartInstance.data.datasets[datasetIndex].data = newData;\n  // \tchartInstance.update();\n  //   };\n  //   const onButtonClick = () => {\n  // \tconst data = [1, 2, 3, 4, 5, 6];\n  // \tupdateDataset(0, data);\n  //   };\n  // var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n  // chart.render();\n  // var barCount = 60;\n  // var initialDateStr = '01 Apr 2017 00:00 Z';\n  // var ctx = document.getElementById('chart').getContext('2d');\n  // ctx.canvas.width = 240;\n  // ctx.canvas.height = 240;\n  // var getRandomInt = function(max) {\n  // \treturn Math.floor(Math.random() * Math.floor(max));\t\t\n  // };\n  // function getData(dateStr, count) {\n  // \tvar dateFormat = 'MMMM DD YYYY';\n  // \tvar date = moment(`${dateStr}`, dateFormat);\n  // \tvar data = [randomBar(date, 30)];\t\t\n  // \twhile (data.length < count) {\t\t\n  // \t\tdate = date.plus({days: 1});\t\t\n  // \t\tif (date.weekday <= 5) {\t\t\t\n  // \t\t\tdata.push(randomBar(date, data[data.length - 1].c));\n  // \t\t}\t\t\t\n  // \t}\t\t\n  // \treturn data;\t\t\n  // }\t\n  // function randomNumber(min, max) {\t\n  // \treturn Math.random() * (max - min) + min;\n  // }\n  // function randomBar(date, lastClose) {\n  // \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n  // \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n  // \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n  // \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n  // \treturn {\n  // \t\tt: date.valueOf(),\n  // \t\to: open,\n  // \t\th: high,\n  // \t\tl: low,\n  // \t\tc: close\n  // \t};\n  // }\n  // var update = function() {\n  // \tvar dataset = chart.config.data.datasets[0];\n  // \t// candlestick vs ohlc\n  // \tvar type = document.getElementById('type').value;\n  // \tdataset.type = type;\n  // \t// linear vs log\n  // \tvar scaleType = document.getElementById('scale-type').value;\n  // \tchart.config.options.scales.y.type = scaleType;\n  // \t// color\n  // \tvar colorScheme = document.getElementById('color-scheme').value;\n  // \tif (colorScheme === 'neon') {\n  // \t\tdataset.color = {\n  // \t\t\tup: '#01ff01',\n  // \t\t\tdown: '#fe0000',\n  // \t\t\tunchanged: '#999',\n  // \t\t};\n  // \t} else {\n  // \t\tdelete dataset.color;\n  // \t}\n  // \t// border\n  // \tvar border = document.getElementById('border').value;\n  // \tvar defaultOpts = Chart.defaults.elements[type];\n  // \tif (border === 'true') {\n  // \t\tdataset.borderColor = defaultOpts.borderColor;\n  // \t} else {\n  // \t\tdataset.borderColor = {\n  // \t\t\tup: defaultOpts.color.up,\n  // \t\t\tdown: defaultOpts.color.down,\n  // \t\t\tunchanged: defaultOpts.color.up\n  // \t\t};\n  // \t}\n  // \tchart.update();\n  // };\n  //   update();\n  //   document.getElementById('randomizeData').addEventListener('click', function() {\n  //     chart.data.datasets.forEach(function(dataset) {\n  //       dataset.data = getData(initialDateStr, barCount);\n  //     });\n  //     update();\n  //   })\n  // const theme = useTheme();\n\n  var jokeData = [{\n    x: new Date(1538778600000),\n    y: [6629.81, 6650.5, 6623.04, 6633.33]\n  }, {\n    x: new Date(1538780400000),\n    y: [6632.01, 6643.59, 6620, 6630.11]\n  }, {\n    x: new Date(1538782200000),\n    y: [6630.71, 6648.95, 6623.34, 6635.65]\n  }];\n  var lastDate = 0;\n  var data = [];\n  var TICKINTERVAL = 86400000;\n  var XAXISRANGE = 777600000;\n\n  function getDayWiseTimeSeries(baseval, count, yrange) {\n    var i = 0;\n\n    while (i < count) {\n      var x = baseval;\n      var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n      data.push({\n        x: x,\n        y: y\n      });\n      lastDate = baseval;\n      baseval += TICKINTERVAL;\n      i++;\n    }\n  }\n\n  getDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n    min: 10,\n    max: 90\n  });\n\n  function resetData() {\n    // Alternatively, you can also reset the data at certain intervals to prevent creating a huge series \n    data = data.slice(data.length - 10, data.length);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 2\n    }\n  }, \"Stocks to watch:\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(CandleStick, {\n    chartData: jokeData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 3\n    }\n  })));\n}\n\n;\nexport default StockWatch;","map":{"version":3,"sources":["C:/Users/jordo/Google Drive/GitHub/Project-3/StocksN/client/src/Components/StockWatch/index.js"],"names":["React","useState","useEffect","useRef","Title","CandleStick","useScript","moment","StockWatch","props","console","log","jokeData","x","Date","y","lastDate","data","TICKINTERVAL","XAXISRANGE","getDayWiseTimeSeries","baseval","count","yrange","i","Math","floor","random","max","min","push","getTime","resetData","slice","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAE1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAF0B,CAI1B;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAGC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGD;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMC;;AAEA,MAAMG,QAAQ,GAAG,CAAC;AACjBC,IAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS,aAAT,CADc;AAEjBC,IAAAA,CAAC,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,OAA3B;AAFc,GAAD,EAIf;AACDF,IAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS,aAAT,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,IAAnB,EAAyB,OAAzB;AAFF,GAJe,EAQf;AACDF,IAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS,aAAT,CADF;AAEDC,IAAAA,CAAC,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B;AAFF,GARe,CAAjB;AAeA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,YAAY,GAAG,QAAnB;AACA,MAAIC,UAAU,GAAG,SAAjB;;AACA,WAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,KAAvC,EAA8CC,MAA9C,EAAsD;AACpD,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGF,KAAX,EAAkB;AACnB,UAAIT,CAAC,GAAGQ,OAAR;AACA,UAAIN,CAAC,GAAGU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,MAAM,CAACK,GAAP,GAAaL,MAAM,CAACM,GAApB,GAA0B,CAA3C,CAAX,IAA4DN,MAAM,CAACM,GAA3E;AAEAZ,MAAAA,IAAI,CAACa,IAAL,CAAU;AACRjB,QAAAA,CAAC,EAADA,CADQ;AACLE,QAAAA,CAAC,EAADA;AADK,OAAV;AAGAC,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,IAAIH,YAAX;AACAM,MAAAA,CAAC;AACC;AACF;;AAEDJ,EAAAA,oBAAoB,CAAC,IAAIN,IAAJ,CAAS,iBAAT,EAA4BiB,OAA5B,EAAD,EAAwC,EAAxC,EAA4C;AAC9DF,IAAAA,GAAG,EAAE,EADyD;AAE9DD,IAAAA,GAAG,EAAE;AAFyD,GAA5C,CAApB;;AAOA,WAASI,SAAT,GAAoB;AAClB;AACAf,IAAAA,IAAI,GAAGA,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACiB,MAAL,GAAc,EAAzB,EAA6BjB,IAAI,CAACiB,MAAlC,CAAP;AACD;;AAgBF,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJA,eAKA;AAAK,IAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEtB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CALA,CADD;AAaC;;AAAA;AAED,eAAeJ,UAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Title from '../TitleComponent/index.js';\nimport CandleStick from '../CandleStick';\nimport useScript from './useScript';\nimport moment from 'moment';\n\nfunction StockWatch(props){\n\nconsole.log(props)\n\n// const [loaded, error] = useScript(\n//     './Chart-chart-financial.js'\n//   );\n\n//   useEffect(() => {\n// \tif (!loaded) return\n// }, [loaded, error])\n\n// [] = useState({\n\n// })\n// var dataDate = Chart.()\n\n\n\n\n\n\n// const chartConfig = {\n// \toptions: {\n// \t\tchart: {\n// \t\t\ttype: 'candlestick',\n// \t\t\theight: 240\n// \t\t  },\n// \t\t  title: {\n// \t\t\ttext: 'CandleStick Chart',\n// \t\t\talign: 'left'\n// \t\t  },\n// \t\t  xaxis: {\n// \t\t\ttype: 'datetime'\n// \t\t  },\n// \t\t  yaxis: {\n// \t\t\ttooltip: {\n// \t\t\t  enabled: true\n// \t\t\t}\n// \t\t  }\n\t\t\n// \t},\n// \tseries: [{\n// \t\tdata: data.slice()\n// \t}],\n\t// type: 'candlestick',\n\t// data: {\n\t// \tdatasets: [{\n\t// \t\tlabel: 'CHRT - Chart.js Corporation',\n\t// \t\tdata: getData(initialDateStr, barCount)\n\t// \t}]\n\t// },\n\t\n\t// options: {\n\t// \tscales: {\n\t// \t\tx: {\n\t// \t\t\tafterBuildTicks: function(scale) {\n\t// \t\t\t\tconst majorUnit = scale._majorUnit;\n\t// \t\t\t\tconst ticks = scale.ticks;\n\t// \t\t\t\tconst firstTick = ticks[0];\n\t// \t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n\n\t// \t\t\t\tval = moment(ticks[0].value);\n\t// \t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n\t// \t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n\t// \t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n\t// \t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n\t// \t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n\t// \t\t\t\t\tfirstTick.major = true;\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tfirstTick.major = false;\n\t// \t\t\t\t}\n\t// \t\t\t\tlastMajor = val.get(majorUnit);\n\n\t// \t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n\t// \t\t\t\t\ttick = ticks[i];\n\t// \t\t\t\t\tval = moment(tick.value);\n\t// \t\t\t\t\tcurrMajor = val.get(majorUnit);\n\t// \t\t\t\t\ttick.major = currMajor !== lastMajor;\n\t// \t\t\t\t\tlastMajor = currMajor;\n\t// \t\t\t\t}\n\t// \t\t\t\treturn ticks;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n// }\n\n\n\t// const chartContainer = useRef(null);\n\t// const [chartInstance, setChartInstance] = useState(null)\n\t\n\t// useEffect(() => {\n\t// \tif (chartContainer && chartContainer.current) {\n\t// \t  const newChartInstance = new Chart(chartContainer.current, chartConfig);\n\t// \t  setChartInstance(newChartInstance);\n\t// \t  Chart.render()\n\t// \t}\n\t//   }, [chartContainer]);\n\n\t//   const updateDataset = (datasetIndex, newData) => {\n\t// \tchartInstance.data.datasets[datasetIndex].data = newData;\n\t// \tchartInstance.update();\n\t//   };\n\t\n\t//   const onButtonClick = () => {\n\t// \tconst data = [1, 2, 3, 4, 5, 6];\n\t// \tupdateDataset(0, data);\n\t//   };\n\n\n\t// var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n\t// chart.render();\n\n\n// var barCount = 60;\n// var initialDateStr = '01 Apr 2017 00:00 Z';\n\n// var ctx = document.getElementById('chart').getContext('2d');\n// ctx.canvas.width = 240;\n// ctx.canvas.height = 240;\n\n// var getRandomInt = function(max) {\n// \treturn Math.floor(Math.random() * Math.floor(max));\t\t\n// };\n\n// function getData(dateStr, count) {\n// \tvar dateFormat = 'MMMM DD YYYY';\n// \tvar date = moment(`${dateStr}`, dateFormat);\n// \tvar data = [randomBar(date, 30)];\t\t\n// \twhile (data.length < count) {\t\t\n// \t\tdate = date.plus({days: 1});\t\t\n// \t\tif (date.weekday <= 5) {\t\t\t\n// \t\t\tdata.push(randomBar(date, data[data.length - 1].c));\n// \t\t}\t\t\t\n// \t}\t\t\n// \treturn data;\t\t\n// }\t\n\n\n// function randomNumber(min, max) {\t\n// \treturn Math.random() * (max - min) + min;\n// }\n\n\n// function randomBar(date, lastClose) {\n// \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n// \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n// \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n// \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n// \treturn {\n// \t\tt: date.valueOf(),\n// \t\to: open,\n// \t\th: high,\n// \t\tl: low,\n// \t\tc: close\n// \t};\n\n// }\n\n\n\n\n\n\n// var update = function() {\n// \tvar dataset = chart.config.data.datasets[0];\n\n// \t// candlestick vs ohlc\n// \tvar type = document.getElementById('type').value;\n// \tdataset.type = type;\n\n// \t// linear vs log\n// \tvar scaleType = document.getElementById('scale-type').value;\n// \tchart.config.options.scales.y.type = scaleType;\n\n// \t// color\n// \tvar colorScheme = document.getElementById('color-scheme').value;\n// \tif (colorScheme === 'neon') {\n// \t\tdataset.color = {\n// \t\t\tup: '#01ff01',\n// \t\t\tdown: '#fe0000',\n// \t\t\tunchanged: '#999',\n// \t\t};\n// \t} else {\n// \t\tdelete dataset.color;\n// \t}\n\n// \t// border\n// \tvar border = document.getElementById('border').value;\n// \tvar defaultOpts = Chart.defaults.elements[type];\n// \tif (border === 'true') {\n// \t\tdataset.borderColor = defaultOpts.borderColor;\n// \t} else {\n// \t\tdataset.borderColor = {\n// \t\t\tup: defaultOpts.color.up,\n// \t\t\tdown: defaultOpts.color.down,\n// \t\t\tunchanged: defaultOpts.color.up\n// \t\t};\n// \t}\n\n// \tchart.update();\n// };\n\n//   update();\n\n//   document.getElementById('randomizeData').addEventListener('click', function() {\n//     chart.data.datasets.forEach(function(dataset) {\n//       dataset.data = getData(initialDateStr, barCount);\n//     });\n//     update();\n//   })\n\n\t\n \n  \n\n\t// const theme = useTheme();\n\n\tconst jokeData = [{\n\t\tx: new Date(1538778600000),\n\t\ty: [6629.81, 6650.5, 6623.04, 6633.33]\n\t  },\n\t  {\n\t\tx: new Date(1538780400000),\n\t\ty: [6632.01, 6643.59, 6620, 6630.11]\n\t  },\n\t  {\n\t\tx: new Date(1538782200000),\n\t\ty: [6630.71, 6648.95, 6623.34, 6635.65]\n\t  }]\n\n\n\n\tvar lastDate = 0;\n\tvar data = []\n\tvar TICKINTERVAL = 86400000\n\tlet XAXISRANGE = 777600000\n\tfunction getDayWiseTimeSeries(baseval, count, yrange) {\n\t  var i = 0;\n\t  while (i < count) {\n\t\tvar x = baseval;\n\t\tvar y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\t\n\t\tdata.push({\n\t\t  x, y\n\t\t});\n\t\tlastDate = baseval\n\t\tbaseval += TICKINTERVAL;\n\t\ti++;\n\t  }\n\t}\n\t\n\tgetDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n\t  min: 10,\n\t  max: 90\n\t})\n\t\n\n\t\n\tfunction resetData(){\n\t  // Alternatively, you can also reset the data at certain intervals to prevent creating a huge series \n\t  data = data.slice(data.length - 10, data.length);\n\t}\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\nreturn (\n\t<React.Fragment>\n\t\t\n\t{/* {loaded && !error ? <div /> : <b>Something went wrong!</b>} */}\n\n\t<Title>Stocks to watch:</Title>\n\t<div id='chart'>\n\t\t<CandleStick chartData={jokeData}/>\n    </div>\n\n\t</React.Fragment>\n);\n\n};\n\nexport default StockWatch;"]},"metadata":{},"sourceType":"module"}