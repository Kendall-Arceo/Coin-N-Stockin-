{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useEffect } from 'react';\n\nvar useScript = function useScript(src) {\n  var cachedScripts = [];\n\n  var _useState = useState({\n    loaded: false,\n    error: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    // If cachedScripts array already includes src that means another instance ...\n    // ... of this hook already loaded this script, so no need to load again.\n    if (cachedScripts.includes(src)) {\n      setState({\n        loaded: true,\n        error: false\n      });\n    } else {\n      cachedScripts.push(src); // Create script\n\n      var script = document.createElement('script');\n      script.src = src;\n      script.async = true; // Script event listener callbacks for load and error\n\n      var onScriptLoad = function onScriptLoad() {\n        setState({\n          loaded: true,\n          error: false\n        });\n      };\n\n      var onScriptError = function onScriptError() {\n        // Remove from cachedScripts we can try loading again\n        var index = cachedScripts.indexOf(src);\n        if (index >= 0) cachedScripts.splice(index, 1);\n        script.remove();\n        setState({\n          loaded: true,\n          error: true\n        });\n      };\n\n      script.addEventListener('load', onScriptLoad);\n      script.addEventListener('error', onScriptError); // Add script to document body\n\n      document.body.appendChild(script); // Remove event listeners on cleanup\n\n      return function () {\n        script.removeEventListener('load', onScriptLoad);\n        script.removeEventListener('error', onScriptError);\n      };\n    }\n  }, [src] // Only re-run effect if script src changes\n  );\n  return [state.loaded, state.error];\n};\n\nexport default useScript;","map":{"version":3,"sources":["C:/Users/jordo/Google Drive/GitHub/Project-3/StocksN/client/src/Components/StockWatch/useScript.js"],"names":["useEffect","useScript","src","cachedScripts","useState","loaded","error","state","setState","includes","push","script","document","createElement","async","onScriptLoad","onScriptError","index","indexOf","splice","remove","addEventListener","body","appendChild","removeEventListener"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AAErB,MAAIC,aAAa,GAAG,EAApB;;AAFqB,kBAIKC,QAAQ,CAAC;AAC/BC,IAAAA,MAAM,EAAE,KADuB;AAE/BC,IAAAA,KAAK,EAAE;AAFwB,GAAD,CAJb;AAAA;AAAA,MAIdC,KAJc;AAAA,MAIPC,QAJO;;AASrBR,EAAAA,SAAS,CACL,YAAM;AACN;AACA;AACA,QAAIG,aAAa,CAACM,QAAd,CAAuBP,GAAvB,CAAJ,EAAiC;AAC7BM,MAAAA,QAAQ,CAAC;AACTH,QAAAA,MAAM,EAAE,IADC;AAETC,QAAAA,KAAK,EAAE;AAFE,OAAD,CAAR;AAIH,KALD,MAKO;AACHH,MAAAA,aAAa,CAACO,IAAd,CAAmBR,GAAnB,EADG,CAGH;;AACA,UAAIS,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,MAAAA,MAAM,CAACT,GAAP,GAAaA,GAAb;AACAS,MAAAA,MAAM,CAACG,KAAP,GAAe,IAAf,CANG,CAQH;;AACA,UAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC3BP,QAAAA,QAAQ,CAAC;AACLH,UAAAA,MAAM,EAAE,IADH;AAELC,UAAAA,KAAK,EAAE;AAFF,SAAD,CAAR;AAIC,OALD;;AAOA,UAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC5B;AACA,YAAMC,KAAK,GAAGd,aAAa,CAACe,OAAd,CAAsBhB,GAAtB,CAAd;AACA,YAAIe,KAAK,IAAI,CAAb,EAAgBd,aAAa,CAACgB,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AAChBN,QAAAA,MAAM,CAACS,MAAP;AAEAZ,QAAAA,QAAQ,CAAC;AACLH,UAAAA,MAAM,EAAE,IADH;AAELC,UAAAA,KAAK,EAAE;AAFF,SAAD,CAAR;AAIC,OAVD;;AAYAK,MAAAA,MAAM,CAACU,gBAAP,CAAwB,MAAxB,EAAgCN,YAAhC;AACAJ,MAAAA,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiCL,aAAjC,EA7BG,CA+BH;;AACAJ,MAAAA,QAAQ,CAACU,IAAT,CAAcC,WAAd,CAA0BZ,MAA1B,EAhCG,CAkCH;;AACA,aAAO,YAAM;AACbA,QAAAA,MAAM,CAACa,mBAAP,CAA2B,MAA3B,EAAmCT,YAAnC;AACAJ,QAAAA,MAAM,CAACa,mBAAP,CAA2B,OAA3B,EAAoCR,aAApC;AACC,OAHD;AAIH;AACA,GAjDI,EAkDL,CAACd,GAAD,CAlDK,CAkDC;AAlDD,GAAT;AAqDA,SAAO,CAACK,KAAK,CAACF,MAAP,EAAeE,KAAK,CAACD,KAArB,CAAP;AACH,CA/DD;;AAgEA,eAAeL,SAAf","sourcesContent":["import { useEffect } from 'react';\r\n\r\nconst useScript = src => {\r\n        \r\n    let cachedScripts = [];\r\n        \r\n    const [state, setState] = useState({\r\n        loaded: false,\r\n        error: false\r\n    });\r\n    \r\n    useEffect(\r\n        () => {\r\n        // If cachedScripts array already includes src that means another instance ...\r\n        // ... of this hook already loaded this script, so no need to load again.\r\n        if (cachedScripts.includes(src)) {\r\n            setState({\r\n            loaded: true,\r\n            error: false\r\n            });\r\n        } else {\r\n            cachedScripts.push(src);\r\n    \r\n            // Create script\r\n            let script = document.createElement('script');\r\n            script.src = src;\r\n            script.async = true;\r\n    \r\n            // Script event listener callbacks for load and error\r\n            const onScriptLoad = () => {\r\n            setState({\r\n                loaded: true,\r\n                error: false\r\n            });\r\n            };\r\n    \r\n            const onScriptError = () => {\r\n            // Remove from cachedScripts we can try loading again\r\n            const index = cachedScripts.indexOf(src);\r\n            if (index >= 0) cachedScripts.splice(index, 1);\r\n            script.remove();\r\n    \r\n            setState({\r\n                loaded: true,\r\n                error: true\r\n            });\r\n            };\r\n    \r\n            script.addEventListener('load', onScriptLoad);\r\n            script.addEventListener('error', onScriptError);\r\n    \r\n            // Add script to document body\r\n            document.body.appendChild(script);\r\n    \r\n            // Remove event listeners on cleanup\r\n            return () => {\r\n            script.removeEventListener('load', onScriptLoad);\r\n            script.removeEventListener('error', onScriptError);\r\n            };\r\n        }\r\n        },\r\n        [src] // Only re-run effect if script src changes\r\n    );\r\n    \r\n    return [state.loaded, state.error];\r\n}\r\nexport default useScript;"]},"metadata":{},"sourceType":"module"}