{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\src\\\\Components\\\\CandleStick\\\\index.js\";\nimport React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nvar CandleStick = /*#__PURE__*/function (_Component) {\n  _inherits(CandleStick, _Component);\n\n  function CandleStick(props) {\n    var _this;\n\n    _classCallCheck(this, CandleStick);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CandleStick).call(this, props));\n    console.log(props);\n    _this.state = {\n      series: [{\n        data: props.chartData\n      }],\n      options: {\n        chart: {\n          type: 'candlestick',\n          height: 350\n        },\n        title: {\n          text: 'CandleStick Chart',\n          align: 'left'\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        yaxis: {\n          tooltip: {\n            enabled: true\n          }\n        } // chart: {\n        //   id: 'realtime',\n        //   height: 240,\n        //   width: 240,\n        //   type: 'line',\n        //   animations: {\n        //     enabled: true,\n        //     easing: 'linear',\n        //     dynamicAnimation: {\n        //       speed: 1000\n        //     }\n        //   },\n        //   toolbar: {\n        //     show: false\n        //   },\n        //   zoom: {\n        //     enabled: false\n        //   }\n        // },\n        // dataLabels: {\n        //   enabled: false\n        // },\n        // stroke: {\n        //   curve: 'smooth'\n        // },\n        // title: {\n        //   text: 'Dynamic Updating Chart',\n        //   align: 'left'\n        // },\n        // markers: {\n        //   size: 0\n        // },\n        // xaxis: {\n        //   type: 'datetime',\n        //   range: 777600000,\n        // },\n        // yaxis: {\n        //   max: 100\n        // },\n        // legend: {\n        //   show: false\n        // },\n\n      }\n    };\n    return _this;\n  } // componentDidUpdate(prevProps){\n  // function getNewSeries(baseval, yrange) {\n  //     var newDate = baseval + TICKINTERVAL;\n  //     lastDate = newDate\n  //     for(var i = 0; i< data.length - 10; i++) {\n  //       // IMPORTANT\n  //       // we reset the x and y of the data which is out of drawing area\n  //       // to prevent memory leaks\n  //       data[i].x = newDate - XAXISRANGE - TICKINTERVAL\n  //       data[i].y = 0\n  //     }\n  //     data.push({\n  //       x: newDate,\n  //       y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  //     })\n  //   }\n  // const newSeries = [];\n  // this.state.series.map((s) => {\n  // const data = s.data.map(() => {\n  //     return Math.floor(Math.random() * (180 - min + 1)) + min\n  //     })\n  // newSeries.push({ data, name: s.name })\n  // })\n  // this.setState({\n  // series: newSeries\n  // })\n  // };\n  // componentDidMount() {\n  // window.setInterval(() => {\n  //   getNewSeries(lastDate, {\n  //     min: 10,\n  //     max: 90\n  //   })\n  //   ApexCharts.exec('realtime', 'updateSeries', [{\n  //     data: data\n  //   }])\n  // }, 1000)\n  // }\n\n\n  _createClass(CandleStick, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Chart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"candlestick\",\n        height: \"240\",\n        width: \"240\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return CandleStick;\n}(Component);\n\nexport default CandleStick;","map":{"version":3,"sources":["C:/Users/jordo/Google Drive/GitHub/Project-3/StocksN/client/src/Components/CandleStick/index.js"],"names":["React","Component","Chart","CandleStick","props","console","log","state","series","data","chartData","options","chart","type","height","title","text","align","xaxis","yaxis","tooltip","enabled"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;IAEMC,W;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACJ,UAAKG,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,CAAC;AACPC,QAAAA,IAAI,EAAEL,KAAK,CAACM;AADL,OAAD,CADG;AAIXC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE,aADH;AAEHC,UAAAA,MAAM,EAAE;AAFL,SADA;AAKLC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE,mBADD;AAELC,UAAAA,KAAK,EAAE;AAFF,SALF;AASLC,QAAAA,KAAK,EAAE;AACLL,UAAAA,IAAI,EAAE;AADD,SATF;AAYLM,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAE;AADF;AADJ,SAZF,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1DO;AAJE,KAAb;AAHe;AAuElB,G,CAGD;AAEY;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEV;AAKA;AACE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACF;;;;;6BAEM;AACN,0BACA,oBAAC,KAAD;AACE,QAAA,OAAO,EAAE,KAAKd,KAAL,CAAWI,OADtB;AAEE,QAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWC,MAFrB;AAGE,QAAA,IAAI,EAAC,aAHP;AAIE,QAAA,MAAM,EAAC,KAJT;AAKE,QAAA,KAAK,EAAC,KALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AASD;;;;EAzIqBP,S;;AA4I1B,eAAeE,WAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\n\r\nclass CandleStick extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n            console.log(props)\r\n        this.state = {\r\n          series: [{\r\n            data: props.chartData\r\n          }],\r\n          options: {\r\n            chart: {\r\n                type: 'candlestick',\r\n                height: 350\r\n              },\r\n              title: {\r\n                text: 'CandleStick Chart',\r\n                align: 'left'\r\n              },\r\n              xaxis: {\r\n                type: 'datetime'\r\n              },\r\n              yaxis: {\r\n                tooltip: {\r\n                  enabled: true\r\n                }\r\n              }\r\n            // chart: {\r\n            //   id: 'realtime',\r\n            //   height: 240,\r\n            //   width: 240,\r\n            //   type: 'line',\r\n            //   animations: {\r\n            //     enabled: true,\r\n            //     easing: 'linear',\r\n            //     dynamicAnimation: {\r\n            //       speed: 1000\r\n            //     }\r\n            //   },\r\n            //   toolbar: {\r\n            //     show: false\r\n            //   },\r\n            //   zoom: {\r\n            //     enabled: false\r\n            //   }\r\n            // },\r\n            // dataLabels: {\r\n            //   enabled: false\r\n            // },\r\n            // stroke: {\r\n            //   curve: 'smooth'\r\n            // },\r\n            // title: {\r\n            //   text: 'Dynamic Updating Chart',\r\n            //   align: 'left'\r\n            // },\r\n            // markers: {\r\n            //   size: 0\r\n            // },\r\n            // xaxis: {\r\n            //   type: 'datetime',\r\n            //   range: 777600000,\r\n            // },\r\n            // yaxis: {\r\n            //   max: 100\r\n            // },\r\n            // legend: {\r\n            //   show: false\r\n            // },\r\n          },\r\n        \r\n        \r\n        };\r\n\r\n    }\r\n    \r\n    \r\n    // componentDidUpdate(prevProps){\r\n        \r\n                // function getNewSeries(baseval, yrange) {\r\n                //     var newDate = baseval + TICKINTERVAL;\r\n                //     lastDate = newDate\r\n                  \r\n                //     for(var i = 0; i< data.length - 10; i++) {\r\n                //       // IMPORTANT\r\n                //       // we reset the x and y of the data which is out of drawing area\r\n                //       // to prevent memory leaks\r\n                //       data[i].x = newDate - XAXISRANGE - TICKINTERVAL\r\n                //       data[i].y = 0\r\n                //     }\r\n                  \r\n                //     data.push({\r\n                //       x: newDate,\r\n                //       y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n                //     })\r\n                //   }\r\n        \r\n        \r\n                // const newSeries = [];\r\n        \r\n                // this.state.series.map((s) => {\r\n                // const data = s.data.map(() => {\r\n                //     return Math.floor(Math.random() * (180 - min + 1)) + min\r\n                //     })\r\n                // newSeries.push({ data, name: s.name })\r\n                // })\r\n        \r\n                // this.setState({\r\n                // series: newSeries\r\n                // })\r\n\r\n      // };\r\n\r\n\r\n\r\n    \r\n      // componentDidMount() {\r\n        // window.setInterval(() => {\r\n        //   getNewSeries(lastDate, {\r\n        //     min: 10,\r\n        //     max: 90\r\n        //   })\r\n          \r\n        //   ApexCharts.exec('realtime', 'updateSeries', [{\r\n        //     data: data\r\n        //   }])\r\n        // }, 1000)\r\n      // }\r\n\r\n    render(){\r\n      return (\r\n      <Chart\r\n        options={this.state.options}\r\n        series={this.state.series}\r\n        type=\"candlestick\"\r\n        height=\"240\"\r\n        width=\"240\"\r\n      />\r\n      )\r\n    }\r\n}\r\n\r\nexport default CandleStick;"]},"metadata":{},"sourceType":"module"}