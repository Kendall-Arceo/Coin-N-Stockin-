{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jordo\\\\Google Drive\\\\GitHub\\\\Project-3\\\\StocksN\\\\client\\\\src\\\\Components\\\\StockWatch\\\\index.js\";\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport Title from '../TitleComponent/index.js';\nimport Chart from 'chart.js';\n\nfunction StockWatch(props) {\n  console.log(props); // var barCount = 60;\n  // var initialDateStr = '01 Apr 2017 00:00 Z';\n  // var ctx = document.getElementById('chart').getContext('2d');\n  // ctx.canvas.width = 240;\n  // ctx.canvas.height = 240;\n  // var myStockChart = new Chart(ctx, {\n  // \ttype: 'candlestick',\n  // \tdata: {\n  // \t\tdatasets: [{\n  // \t\t\tlabel: 'CHRT - Chart.js Corporation',\n  // \t\t\tdata: getRandomData(initialDateStr, barCount)\n  // \t\t}]\n  // \t},\n  // \toptions: {\n  // \t\tscales: {\n  // \t\t\tx: {\n  // \t\t\t\tafterBuildTicks: function(scale) {\n  // \t\t\t\t\tconst majorUnit = scale._majorUnit;\n  // \t\t\t\t\tconst ticks = scale.ticks;\n  // \t\t\t\t\tconst firstTick = ticks[0];\n  // \t\t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n  // \t\t\t\t\tval = luxon.DateTime.fromMillis(ticks[0].value);\n  // \t\t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n  // \t\t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n  // \t\t\t\t\t\tfirstTick.major = true;\n  // \t\t\t\t\t} else {\n  // \t\t\t\t\t\tfirstTick.major = false;\n  // \t\t\t\t\t}\n  // \t\t\t\t\tlastMajor = val.get(majorUnit);\n  // \t\t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n  // \t\t\t\t\t\ttick = ticks[i];\n  // \t\t\t\t\t\tval = luxon.DateTime.fromMillis(tick.value);\n  // \t\t\t\t\t\tcurrMajor = val.get(majorUnit);\n  // \t\t\t\t\t\ttick.major = currMajor !== lastMajor;\n  // \t\t\t\t\t\tlastMajor = currMajor;\n  // \t\t\t\t\t}\n  // \t\t\t\t\treturn ticks;\n  // \t\t\t\t}\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // });\n  // function randomBar(date, lastClose) {\n  // \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n  // \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n  // \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n  // \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n  // \treturn {\n  // \t\tt: date.valueOf(),\n  // \t\to: open,\n  // \t\th: high,\n  // \t\tl: low,\n  // \t\tc: close\n  // \t};\n  // }\n  // var update = function() {\n  // \tvar dataset = chart.config.data.datasets[0];\n  // \t// candlestick vs ohlc\n  // \tvar type = document.getElementById('type').value;\n  // \tdataset.type = type;\n  // \t// linear vs log\n  // \tvar scaleType = document.getElementById('scale-type').value;\n  // \tchart.config.options.scales.y.type = scaleType;\n  // \t// color\n  // \tvar colorScheme = document.getElementById('color-scheme').value;\n  // \tif (colorScheme === 'neon') {\n  // \t\tdataset.color = {\n  // \t\t\tup: '#01ff01',\n  // \t\t\tdown: '#fe0000',\n  // \t\t\tunchanged: '#999',\n  // \t\t};\n  // \t} else {\n  // \t\tdelete dataset.color;\n  // \t}\n  // \t// border\n  // \tvar border = document.getElementById('border').value;\n  // \tvar defaultOpts = Chart.defaults.elements[type];\n  // \tif (border === 'true') {\n  // \t\tdataset.borderColor = defaultOpts.borderColor;\n  // \t} else {\n  // \t\tdataset.borderColor = {\n  // \t\t\tup: defaultOpts.color.up,\n  // \t\t\tdown: defaultOpts.color.down,\n  // \t\t\tunchanged: defaultOpts.color.up\n  // \t\t};\n  // \t}\n  // \tchart.update();\n  // };\n  //   update();\n  //   document.getElementById('randomizeData').addEventListener('click', function() {\n  //     chart.data.datasets.forEach(function(dataset) {\n  //       dataset.data = getRandomData(initialDateStr, barCount);\n  //     });\n  //     update();\n  //   })\n\n  var theme = useTheme();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 2\n    }\n  }, \"Stocks to watch:\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 2\n    }\n  }));\n}\n\n;\nexport default StockWatch;","map":{"version":3,"sources":["C:/Users/jordo/Google Drive/GitHub/Project-3/StocksN/client/src/Components/StockWatch/index.js"],"names":["React","useTheme","Title","Chart","StockWatch","props","console","log","theme"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAGA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAE1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAF0B,CAI1B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAKE,MAAMG,KAAK,GAAGP,QAAQ,EAAtB;AAEF,sBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eAEA;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADD;AAOC;;AAAA;AAED,eAAeG,UAAf","sourcesContent":["import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport Title from '../TitleComponent/index.js';\nimport Chart from 'chart.js';\n\n\nfunction StockWatch(props){\n\nconsole.log(props)\n\t\n// var barCount = 60;\n// var initialDateStr = '01 Apr 2017 00:00 Z';\n\n// var ctx = document.getElementById('chart').getContext('2d');\n// ctx.canvas.width = 240;\n// ctx.canvas.height = 240;\n// var myStockChart = new Chart(ctx, {\n// \ttype: 'candlestick',\n// \tdata: {\n// \t\tdatasets: [{\n// \t\t\tlabel: 'CHRT - Chart.js Corporation',\n// \t\t\tdata: getRandomData(initialDateStr, barCount)\n// \t\t}]\n// \t},\n// \toptions: {\n// \t\tscales: {\n// \t\t\tx: {\n// \t\t\t\tafterBuildTicks: function(scale) {\n// \t\t\t\t\tconst majorUnit = scale._majorUnit;\n// \t\t\t\t\tconst ticks = scale.ticks;\n// \t\t\t\t\tconst firstTick = ticks[0];\n// \t\t\t\t\tlet i, ilen, val, tick, currMajor, lastMajor;\n\n// \t\t\t\t\tval = luxon.DateTime.fromMillis(ticks[0].value);\n// \t\t\t\t\tif ((majorUnit === 'minute' && val.second === 0)\n// \t\t\t\t\t\t\t|| (majorUnit === 'hour' && val.minute === 0)\n// \t\t\t\t\t\t\t|| (majorUnit === 'day' && val.hour === 9)\n// \t\t\t\t\t\t\t|| (majorUnit === 'month' && val.day <= 3 && val.weekday === 1)\n// \t\t\t\t\t\t\t|| (majorUnit === 'year' && val.month === 0)) {\n// \t\t\t\t\t\tfirstTick.major = true;\n// \t\t\t\t\t} else {\n// \t\t\t\t\t\tfirstTick.major = false;\n// \t\t\t\t\t}\n// \t\t\t\t\tlastMajor = val.get(majorUnit);\n\n// \t\t\t\t\tfor (i = 1, ilen = ticks.length; i < ilen; i++) {\n// \t\t\t\t\t\ttick = ticks[i];\n// \t\t\t\t\t\tval = luxon.DateTime.fromMillis(tick.value);\n// \t\t\t\t\t\tcurrMajor = val.get(majorUnit);\n// \t\t\t\t\t\ttick.major = currMajor !== lastMajor;\n// \t\t\t\t\t\tlastMajor = currMajor;\n// \t\t\t\t\t}\n// \t\t\t\t\treturn ticks;\n// \t\t\t\t}\n// \t\t\t}\n// \t\t}\n// \t}\n// });\n\n// function randomBar(date, lastClose) {\n// \tvar open = randomNumber(lastClose * 0.95, lastClose * 1.05).toFixed(2);\n// \tvar close = randomNumber(open * 0.95, open * 1.05).toFixed(2);\n// \tvar high = randomNumber(Math.max(open, close), Math.max(open, close) * 1.1).toFixed(2);\n// \tvar low = randomNumber(Math.min(open, close) * 0.9, Math.min(open, close)).toFixed(2);\n// \treturn {\n// \t\tt: date.valueOf(),\n// \t\to: open,\n// \t\th: high,\n// \t\tl: low,\n// \t\tc: close\n// \t};\n\n// }\n\n\n// var update = function() {\n// \tvar dataset = chart.config.data.datasets[0];\n\n// \t// candlestick vs ohlc\n// \tvar type = document.getElementById('type').value;\n// \tdataset.type = type;\n\n// \t// linear vs log\n// \tvar scaleType = document.getElementById('scale-type').value;\n// \tchart.config.options.scales.y.type = scaleType;\n\n// \t// color\n// \tvar colorScheme = document.getElementById('color-scheme').value;\n// \tif (colorScheme === 'neon') {\n// \t\tdataset.color = {\n// \t\t\tup: '#01ff01',\n// \t\t\tdown: '#fe0000',\n// \t\t\tunchanged: '#999',\n// \t\t};\n// \t} else {\n// \t\tdelete dataset.color;\n// \t}\n\n// \t// border\n// \tvar border = document.getElementById('border').value;\n// \tvar defaultOpts = Chart.defaults.elements[type];\n// \tif (border === 'true') {\n// \t\tdataset.borderColor = defaultOpts.borderColor;\n// \t} else {\n// \t\tdataset.borderColor = {\n// \t\t\tup: defaultOpts.color.up,\n// \t\t\tdown: defaultOpts.color.down,\n// \t\t\tunchanged: defaultOpts.color.up\n// \t\t};\n// \t}\n\n// \tchart.update();\n// };\n\n//   update();\n\n//   document.getElementById('randomizeData').addEventListener('click', function() {\n//     chart.data.datasets.forEach(function(dataset) {\n//       dataset.data = getRandomData(initialDateStr, barCount);\n//     });\n//     update();\n//   })\n\n  \n  \n\n\t\tconst theme = useTheme();\n\t\t\nreturn (\n\t<React.Fragment>\n\t<Title>Stocks to watch:</Title>\n\t<canvas id=\"chart\"></canvas>\n\t</React.Fragment>\n);\n\n};\n\nexport default StockWatch;"]},"metadata":{},"sourceType":"module"}